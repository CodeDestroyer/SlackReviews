<?php namespace CodeDad\Events;

use Slack;
use Illuminate\Support\Facades\Log;
//TODO there is probaby a better way to organize the data to go in to the event and how to send messages. Varred out for debugging
/**
 * Class SlackEventHandler
 * @package CodeDad\Events
 */
class SlackEventHandler
{
    /**
     * Handle user login events.
     */
    public function onReviewCreation($event)
    {
        $user = '@' . $event['request_user'];
        $ticket = $event['jira_ticket'];
        Slack::to('#codetest')->send("Code Review Request for jira ticket {$ticket} generated by {$user}");
    }

    /**
     * @param $event
     */
    public function onReviewClaim($event)
    {
        $orguser = '@' . $event['request_user'];
        $reviewer = '@' . $event['completion_user'];
        $comments = $event['request_comments'];
        $ticket = $event['jira_ticket'];
        Slack::to($orguser)->send("Your ticket {$ticket} has been claimed by {$reviewer}");
        Slack::to($reviewer)->send("You have claimed {$ticket}. Notes from {$orguser}: {$comments}");
        Slack::to('#codetest')->send("Ticket {$ticket} claimed by {$reviewer}");
    }
    public function cannotComplete($event)
    {
        Slack::to('@'.$event['user'])->send("Ticket {$event['ticket']} cannot be completed. You do not own this story");
    }

    public function onReviewComplete($event)
    {   $orginUser = "@{$event['request_user']}";
        $reviewer = "@{$event['completion_user']}";
        $comments = $event["completion_comments"];
        $ticket =   $event['jira_ticket'];
        Slack::to($orginUser)->send("Your ticket {$ticket} passed the code review!  Here are {$reviewer}'s comments: {$comments}'");
        Slack::to('#codetest')->send("{$ticket} passed the code review by {$reviewer}");
    }
    /**
     * @param $event
     */
    public function onReviewExists($event)
    {
        $user = '@' . $event['request_user'];
        $jira_ticket = $event['jira_ticket'];
        Slack::to($user)->send('Code review for ' . $jira_ticket . ' all ready exists');
    }

    /**
     * @param $event
     */
    public function reviewDoesNotExist($event)
    {
        $user = '@' . $event['user'];
        $ticket = $event['ticket'];
        Slack::to($user)->send("{$ticket} not found or already claimed");
    }

    public function sendListToUser($event)
    {
        $user = "@{$event['user']}";
        $message = $event['viewData'];
        Slack::to($user)->send($message);
    }
    /**
     * Register the listeners for the subscriber.
     *
     * @param
     * @return array
     */
    public function subscribe($events)
    {
        $events->listen('review.submitted', 'CodeDad\Events\SlackEventHandler@onReviewCreation');
        $events->listen('review.exists', 'CodeDad\Events\SlackEventHandler@onReviewExists');
        $events->listen('review.notAvail', 'CodeDad\Events\SlackEventHandler@reviewDoesNotExist');
        $events->listen('review.claimed', 'CodeDad\Events\SlackEventHandler@onReviewClaim');
        $events->listen('review.sendList','CodeDad\Events\SlackEventHandler@sendListToUser');
        $events->listen('review.canNotComplete', 'CodeDad\Events\SlackEventHandler@cannotComplete');
        $events->listen('review.completed','CodeDad\Events\SlackEventHandler@onReviewComplete');

    }

}