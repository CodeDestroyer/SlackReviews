<?php namespace CodeDad\Events;

use Slack;
//TODO there is probaby a better way to organize the data to go in to the event and how to send messages. better way to set vars
//TODO naming schema is poor
//TODO maybe generic function for message to user and message to channel repeated a bunch.  Could be refactored down some
//TODO maybe two files and a base class?
/**
 * Class SlackEventHandler
 * @package CodeDad\Events
 */
class SlackEventHandler
{
    private $_reviewChannel;
    private $_deployChannel;
    /**
     * Creates a review
     *  @param $event
     */
    public function __construct(){
        $this->_deployChannel = $_ENV['deployChannel'];
        $this->_reviewChannel = $_ENV['reviewChannel'];
    }
    public function onReviewCreation($event)
    {
        $user = '@' . $event['request_user'];
        $ticket = $event['jira_ticket'];
        Slack::to($this->_reviewChannel)->send("Code Review Request for jira ticket {$ticket} generated by {$user}");
    }

    /**
     * Claim a review from a user
     * @param $event
     */
    public function onReviewClaim($event)
    {
        $orguser = '@' . $event['request_user'];
        $reviewer = '@' . $event['completion_user'];
        $ticket = $event['jira_ticket'];
        Slack::to($orguser)->send("Your ticket {$ticket} has been claimed by {$reviewer}");
        Slack::to($this->_reviewChannel)->send("Ticket {$ticket} claimed by {$reviewer}");
    }

    /**
     * Sends out message to original user and channel
     * @param $event
     */
    public function onReviewComplete($event)
    {   $orginUser = "@{$event['request_user']}";
        $reviewer = "@{$event['completion_user']}";
        $comments = $event["completion_comments"];
        $ticket =   $event['jira_ticket'];
        Slack::to($orginUser)->send("Your ticket {$ticket} passed the code review!");
        Slack::to($this->_reviewChannel)->send("{$ticket} passed the code review by {$reviewer}");
    }

    public function onReviewDropped($event)
    {
        $ticket =   $event['jira_ticket'];
        Slack::to($this->_reviewChannel)->send("Ticket: {$ticket} was dropped and has been placed back onto the queue");
    }


    public function onDeploymentCreation($event){
        $ticket = $event['jira_ticket'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} is ready for Staging");
    }

    public function onDeploymentStaged($event){
        $ticket = $event['jira_ticket'];
        $user = $event['user'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been deployed to Staging");
        Slack::to("@{$user}")->send("Please verify {$ticket} in Staging");

    }

    public function onStagingValidation($event){
        $ticket = $event['jira_ticket'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been validated in Staging and is ready for deployment");

    }
    public function onDeployment($event)
    {
        $user = $event['user'];
        $ticket = $event['jira_ticket'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been deployed to Production");
        Slack::to("@{$user}")->send("Please verify {$ticket} in Production");

    }
    public function onProductionValidation($event){
        $ticket = $event['jira_ticket'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been validated in Production!");

    }

    public function OnDeploymentBlocked($event){
        $user = $event['user'];
        $ticket = $event['jira_ticket'];
        $comment = $event['blockReason'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been blocked - {$comment}");
        Slack::to("@{$user}")->send("Your Ticket {$ticket} has been blocked - {$comment}");
    }

    public function OnDeploymentUnblocked($event){
        $user = $event['user'];
        $ticket = $event['jira_ticket'];
        Slack::to($this->_deployChannel)->send("Ticket {$ticket} has been unblocked");
        Slack::to("@{$user}")->send("Your Ticket {$ticket} has been unblocked");
    }
    /**
     * Register the listeners for the subscriber.
     *
     * @param
     * @return array
     */
    public function subscribe($events)
    {
        $events->listen('review.submitted', 'CodeDad\Events\SlackEventHandler@onReviewCreation');
        $events->listen('review.claimed', 'CodeDad\Events\SlackEventHandler@onReviewClaim');
        $events->listen('review.completed','CodeDad\Events\SlackEventHandler@onReviewComplete');
        $events->listen('review.dropped','CodeDad\Events\SlackEventHandler@onReviewDropped');
        $events->listen('deployment.submitted','CodeDad\Events\SlackEventHandler@onDeploymentCreation');
        $events->listen('deployment.isStaged.1','CodeDad\Events\SlackEventHandler@onDeploymentStaged');
        $events->listen('deployment.isValidatedStaging.1','CodeDad\Events\SlackEventHandler@onStagingValidation');
        $events->listen('deployment.isDeployed.1','CodeDad\Events\SlackEventHandler@onDeployment');
        $events->listen('deployment.isValidated.1','CodeDad\Events\SlackEventHandler@onProductionValidation');
        $events->listen('deployment.isBlocked.1', 'CodeDad\Events\SlackEventHandler@OnDeploymentBlocked');
        $events->listen('deployment.isBlocked.0', 'CodeDad\Events\SlackEventHandler@OnDeploymentUnblocked');


    }

}